## License: Apache 2.0. See LICENSE file in root directory.
## Copyright(c) 2015-2017 Intel Corporation. All Rights Reserved.

###############################################
##      Open CV and Numpy integration        ##
###############################################


import pyrealsense2 as rs
import numpy as np
import cv2

camera1 = "912112071545"

stream_width = 640
stream_height = 480
frame_rate = 30
val_width = 320
val_height = 240

pipeline1 = rs.pipeline()
config1 = rs.config()
config1.enable_device(camera1)
config1.enable_stream(rs.stream.depth, stream_width, stream_height, rs.format.z16, frame_rate)
config1.enable_stream(rs.stream.color, stream_width, stream_height, rs.format.bgr8, frame_rate)
align1 = rs.align(rs.stream.color)

try:
    pipeline1.start(config1)
    while True:
        frames1 = pipeline1.wait_for_frames()
        aligned_frames1 = align1.process(frames1)
        color_frame1 = aligned_frames1.get_color_frame()
        depth_frame1 = aligned_frames1.get_depth_frame()

        color_image1 = np.asanyarray(color_frame1.get_data())
        depth_image1 = np.asanyarray(depth_frame1.get_data())

        lower_red = np.array([0,100,100])
        upper_red = np.array([10,255,255])

        b = color_image1[val_width,val_height, 0]
        g = color_image1[val_width,val_height, 1]
        r = color_image1[val_width,val_height, 2]

        depth_value1 = depth_frame1.get_distance(val_width, val_height)
        print(f"Depth1: {depth_value1:0.3f} meters")

        print(f"Colors: {b:0.2f}, {g:0.2f}, {r:0.2f}")

        #, depth_colormap3, depth_colormap4 ,color_image3, color_image4 , depth_colormap2 , color_image2
        cv2.circle(color_image1, (320,240), 5, (0,255,0), 5)
        depth_colormap1 = cv2.applyColorMap(cv2.convertScaleAbs(depth_image1, alpha=0.03), cv2.COLORMAP_JET)
        #combined_color = np.hstack((color_image1, color_image2, color_image3, color_image4))
        #combined_depth = np.hstack((depth_colormap1, depth_colormap2, depth_colormap3, depth_colormap4))
        cv2.namedWindow('Cameras', cv2.WINDOW_AUTOSIZE)
        cv2.namedWindow('Colormap', cv2.WINDOW_AUTOSIZE)
        cv2.imshow('Cameras', color_image1)
        cv2.imshow('Colormap', depth_colormap1)
        
        #cv2.circle(color_image2, (320,240), 5, (0,255,0), 5)

        key = cv2.waitKey(1)
        if key & 0xFF == ord('q') or key == 27:
            break

finally:
    print("Stopping Camera 1 pipeline...")
    pipeline1.stop()
    cv2.destroyAllWindows()
    print("All pipelines stopped and windows closed.")

