## License: Apache 2.0. See LICENSE file in root directory.
## Copyright(c) 2015-2017 Intel Corporation. All Rights Reserved.

###############################################
##      Open CV and Numpy integration        ##
###############################################


import pyrealsense2 as rs
import numpy as np
import cv2

#getting rid of magic numbers
pixels_rows = 640
pixels_col = 480
stream_unkown = 30

camera_depth_x = 320
camera_depth_y = 240
alpha_ = 0.03

x = 5
min_color = 0
max_color = 255

wait_key = 1
this_key = 27


#easier to make extensible
class Camera(object):
    pass

camera1 = Camera()
camera2 = Camera()
cameras = [camera1, camera2]
cameraID = ["909512070385","912112071545"]



for i, camera in enumerate(cameras):
    camera.id = cameraID[i]
    camera.pipeline = rs.pipeline()
    camera.config = rs.config()
    camera.config.enable_device(camera1)
    camera.config.enable_stream(rs.stream.depth, pixels_rows, pixels_col, rs.format.z16, stream_unkown)
    camera.config.enable_stream(rs.stream.color, pixels_rows, pixels_col, rs.format.bgr8, stream_unkown)
    camera.align = rs.align(rs.stream.color)


try:
    for camera in cameras:
        camera.pipeline.start(camera.config)
        while True:
            camera.frames = camera.pipeline.wait_for_frames()
            camera.aligned_frames = camera.align.process(camera.frames)
            camera.color_frame = camera.aligned_frames.get_color_frame()
            camera.depth_frame = camera.aligned_frames.get_depth_frame()

            camera.color_image = np.asanyarray(camera.color_frame.get_data())
            camera.depth_image = np.asanyarray(camera.depth_frame.get_data())


            camera.depth_value = camera.depth_frame.get_distance(camera_depth_x,camera_depth_y)
            print(f"Depth1: {camera.depth_value:0.3f} meters")

            camera.depth_colormap = cv2.applyColorMap(cv2.convertScaleAbs(camera.depth_image, alpha=alpha_), cv2.COLORMAP_JET)


            combined_color = np.hstack((camera.color_image, camera.depth_colormap))

            cv2.namedWindow('Colormap and Cameras', cv2.WINDOW_AUTOSIZE)
            cv2.imshow('Colormap and Cameras', combined_color)
            cv2.circle(camera.color_image, (camera_depth_x,camera_depth_y), x, (min_color,max_color,min_color), x)

            key = cv2.waitKey(wait_key)
            if key & 0xFF == ord('q') or key == this_key:
                break

finally:
    for camera in cameras:
        print("Stopping Camera 1 pipeline...")
        camera.pipeline.stop()

    cv2.destroyAllWindows()
    print("All pipelines stopped and windows closed.")
